Git

---------------------------------------------------------Установка Git на Mac---------------------------------------------------------

Шаг 1: Установите Homebrew, если он еще не установлен. Для этого в терминале выполните команду:
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

Шаг 2: Установите Git, используя Homebrew. Для этого выполните следующую команду в терминале:
brew install git

Шаг 3: Проверьте, что Git установлен правильно, выполнив команду:
git --version

Шаг 4: Настройте имя пользователя и адрес электронной почты, используя команды:
git config --global user.name "Vladyslav_Serhieiev"
git config --global user.email "sergieiev.vlad@gmail.com"


mkdir folder создание папки с именем "folder"
git init: команда инициализирует пустой репозиторий Git в текущей директории. После инициализации репозитория вам нужно будет добавить файлы и выполнить первый коммит.


git status: команда показывает состояние рабочего каталога и индекса Git, а также отображает список измененных, добавленных и удаленных файлов.

git add: команда добавляет изменения в файлы в индекс Git, который представляет собой промежуточный слой между рабочим каталогом и репозиторием. Например, чтобы добавить все изменения в индекс, можно использовать команду:
git add .
или перечислить все добавляемые файлы: git add file_name_1 file_name_2


git commit: команда создает новый коммит с изменениями из индекса Git. Коммит содержит сообщение, которое описывает изменения. Например:
git commit -m "Добавил новую функциональность"
Команда git commit -a -m "comment" используется для коммита всех измененных файлов в вашем проекте и добавления комментария к коммиту в одной команде.
Аргумент -a указывает Git автоматически добавить все измененные файлы в индекс (staging area) перед коммитом. Это означает, что вы можете пропустить команду git add и сразу приступить к созданию коммита.


git log - это команда Git, которая используется для просмотра истории коммитов в репозитории Git. Она выводит список коммитов в порядке, начиная с самого нового и заканчивая самым старым. Каждый коммит содержит информацию о его авторе, дате и сообщении коммита.


git diff - это команда Git, которая используется для вывода различий между двумя состояниями репозитория. Она показывает изменения, которые были внесены в файлы, но еще не были зафиксированы в коммит.
git diff --staged или git diff --cached - это команда Git, которая используется для вывода различий между индексом (stage) и последним зафиксированным коммитом. Эта команда показывает изменения, которые были проиндексированы с помощью команды git add, но еще не были зафиксированы в коммите.
git diff <commit> - это команда Git, которая показывает различия между указанным коммитом и текущим состоянием репозитория. Эта команда позволяет увидеть, какие изменения были внесены в файлы после указанного коммита.


git reset - это команда Git, которая позволяет переместить указатель HEAD и/или изменить состояние индекса (stage) и рабочей директории (working directory) на указанный коммит.
Синтаксис команды git reset выглядит следующим образом:
git reset [<options>] [<commit>]
При использовании этой команды вы можете выбрать один из нескольких <options>:
	--soft: перемещает указатель HEAD на указанный коммит, но не изменяет состояние индекса и рабочей директории. Этот режим позволяет "отменить" коммит, сохраняя внесенные изменения в индексе и рабочей директории:
git reset --soft HEAD^
Здесь HEAD^ - это ссылка на предыдущий коммит. Так же можно HEAD^ заменить на HEAD~1
	--mixed (по умолчанию): перемещает указатель HEAD на указанный коммит и сбрасывает состояние индекса на этот коммит, но не изменяет рабочую директорию. Этот режим позволяет "отменить" коммит и сбросить индекс до состояния перед ним, но при этом сохранить изменения в рабочей директории. Например, чтобы отменить последний коммит и сбросить индекс до состояния перед ним, выполните:
git reset HEAD^
	--hard: перемещает указатель HEAD на указанный коммит и полностью сбрасывает состояние индекса и рабочей директории на этот коммит. Этот режим позволяет "отменить" коммит и полностью вернуть состояние репозитория до указанного коммита, теряя все несохраненные изменения. Обычно этот режим используется в крайних случаях, например, когда необходимо вернуться к старому состоянию репозитория и начать работу с него заново. Например, чтобы полностью сбросить все изменения после указанного коммита, выполните:
git reset --hard <commit>
Здесь <commit> - это идентификатор коммита, на который нужно переместить указатель HEAD.


Команда git clean используется для удаления неотслеживаемых файлов из вашей рабочей директории. Неотслеживаемые файлы - это файлы, которые не были добавлены в Git с помощью команды git add
Команда git clean может быть вызвана с различными опциями, чтобы указать, какие файлы должны быть удалены. Например:
git clean -n - показывает список файлов, которые будут удалены, но не фактически не удаляет их.
git clean -f - удаляет файлы из рабочей директории без подтверждения.


git checkout - это команда Git, которая позволяет перемещаться по веткам и переключаться между коммитами.
Синтаксис команды git checkout выглядит следующим образом:
git checkout [<options>] <commit>
Для того, чтобы вернуться по ветке к актуальному комину нужно использовать команду:
git checkout [HEAD name]
к примеру: git checkout master
Команда 'git checkout -- .' отменяет все изменения, которые были сделаны после последнего коммита в текущей ветке. Это означает, что если вы создали новые файлы, они будут удалены, если вы удалили файлы, они будут восстановлены, а если вы внесли изменения в файлы, они будут возвращены к своему состоянию на момент последнего коммита.
'--' - это специальный аргумент, который указывает на то, что дальше следует не опция, а путь к файлам.
'.' означает текущую директорию, т.е. все файлы в текущей директории будут отменены.
Эта команда не отменяет изменения, которые были добавлены в индекс (закомичены). Если вы хотите отменить изменения, которые уже были добавлены в индекс, используйте команду git reset или git reset HEAD.


С помощью команды git remote вы можете просмотреть список всех удаленных репозиториев, связанных с вашим локальным репозиторием, и управлять ими. Например:
git remote - показывает список всех удаленных репозиториев, связанных с вашим локальным репозиторием.
git remote -v - показывает список всех удаленных репозиториев, связанных с вашим локальным репозиторием, и их URL-адреса.
git remote add <имя_удаленного_репозитория> <URL_адрес_удаленного_репозитория> - добавляет новый удаленный репозиторий с указанным именем и URL-адресом.


Команда git push используется для отправки изменений из вашего локального репозитория на удаленный репозиторий. При отправке изменений вы указываете имя удаленного репозитория и имя ветки, которую вы хотите отправить. Например:
git push <имя_удаленного_репозитория> <имя_ветки>
Если вы хотите отправить изменения на ветку с тем же именем, что и в вашем локальном репозитории, вы можете использовать команду git push без аргументов. В этом случае Git автоматически отправит изменения на ветку с тем же именем на удаленном репозитории, который был указан при клонировании.


Команда git pull используется для загрузки и объединения изменений из удаленного репозитория в ваш локальный репозиторий.
Формат команды git pull:
git pull <имя_удаленного_репозитория> <имя_ветки>
Если вы работаете на одной ветке и хотите загрузить изменения из удаленного репозитория, то вместо <имя_ветки> можно указать - (минус), и Git попытается использовать ту же самую ветку, что и на удаленном репозитории.
Если вам нужно загрузить изменения из удаленного репозитория и объединить их с вашей текущей веткой без каких-либо дополнительных действий, просто запустите git pull без аргументов. В этом случае Git автоматически загрузит изменения из удаленного репозитория и объединит их с вашей текущей веткой.



-- Lj,fdbnnm 















